<div class="ui container" style="margin-top: 30px;">
  <h3 class="ui header">Type the following text:</h3>
  <div class="ui segment" id="text-display"></div>
  <form id="typing-form" action="/typing_racer/finish" method="post" data-turbo="false">
    <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
    <%= hidden_field_tag :original_text, @text %>
    <%= hidden_field_tag :time, "", id: "time" %>
    <div class="field">
      <textarea name="typed_text" id="typed-input" rows="10" cols="50" class="ui textarea" placeholder="Start typing here..."></textarea>
    </div>
    <button type="submit" class="ui teal button">Finish</button>
  </form>
  <div class="ui segment" id="stats" style="margin-top: 20px;">
    <p><strong>WPM:</strong> <span id="wpm">0</span></p>
    <p><strong>Time:</strong> <span id="timer">0.0</span> seconds</p>
    <p><strong>Accuracy:</strong> <span id="accuracy">0%</span></p>
  </div>
</div>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const input = document.getElementById("typed-input");
    const display = document.getElementById("text-display");
    const form = document.getElementById("typing-form");
    const originalText = `<%= j @text %>`.replace(/\s+/g, ' ').trim();
    const timerDisplay = document.getElementById("timer");
    const wpmDisplay = document.getElementById("wpm");
    const accDisplay = document.getElementById("accuracy");
    const timeField = document.getElementById("time");

    let startTime;
    let timerInterval;
    let formSubmitted = false;

    function renderDisplay(typed = "") {
      let result = "";
      let motorcycleInserted = false;

      for (let i = 0; i < originalText.length; i++) {
        const originalChar = originalText[i];
        const typedChar = typed[i];
        let spanClass = "";

        if (typedChar == null) {
          spanClass = "";
        } else if (typedChar === originalChar) {
          spanClass = "correct";
        } else {
          spanClass = "incorrect";
        }

        // Motorcycle right after last correct character
        if (!motorcycleInserted && (typedChar == null || typedChar !== originalChar)) {
          result += `<i class="motorcycle icon moving-moto"></i>`;
          motorcycleInserted = true;
        }

        result += `<span class="${spanClass}">${originalChar}</span>`;
      }

      if (!motorcycleInserted) {
        result += `<i class="motorcycle icon moving-moto"></i>`;
      }

      display.innerHTML = result;
    }

    function submitForm() {
      if (!formSubmitted) {
        const endTime = new Date().getTime();
        const totalTime = (endTime - startTime) / 1000;
        timeField.value = totalTime.toFixed(2);
        clearInterval(timerInterval);
        formSubmitted = true;
        form.submit();
      }
    }

    renderDisplay();

    input.addEventListener("focus", () => {
      if (!startTime) {
        startTime = new Date().getTime();
        timerInterval = setInterval(() => {
          let elapsed = (new Date().getTime() - startTime) / 1000;
          timerDisplay.textContent = elapsed.toFixed(1);
        }, 100);
      }
    });

    input.addEventListener("input", () => {
      const typed = input.value.replace(/\s+/g, ' ').trim();
      const elapsed = (new Date().getTime() - startTime) / 1000;
      const words = typed.length > 0 ? typed.split(" ").length : 0;
      const wpm = Math.round((words / elapsed) * 60);
      const correct = typed.split("").filter((c, i) => c === originalText[i]).length;
      const accuracy = Math.round((correct / originalText.length) * 100);

      wpmDisplay.textContent = isFinite(wpm) ? wpm : 0;
      accDisplay.textContent = isFinite(accuracy) ? `${accuracy}%` : "0%";

      renderDisplay(typed);

      if (typed === originalText && accuracy === 100) {
        submitForm();
      }
    });

    input.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault(); // prevent newline in textarea
        submitForm();
      }
    });

    form.addEventListener("submit", () => {
      if (!formSubmitted) {
        const endTime = new Date().getTime();
        const totalTime = (endTime - startTime) / 1000;
        timeField.value = totalTime.toFixed(2);
        clearInterval(timerInterval);
        formSubmitted = true;
      }
    });
  });
</script>
<style>
  /* Keep existing styles */
  .ui.container {
    max-width: 700px;
    margin: 30px auto;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

  .ui.header {
    font-weight: 700;
    color: #2185d0;
    text-align: center;
  }

  #text-display {
    background-color: #f9f9f9;
    font-size: 1.25rem;
    line-height: 1.6;
    padding: 20px;
    border-radius: 0.3rem;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    white-space: pre-wrap;
    user-select: none;
    margin-bottom: 20px;
    min-height: 100px;
  }

  #typed-input {
    width: 100%;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 0.3rem;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    padding: 20px;
    font-size: 1.25rem;
    line-height: 1.6;
    resize: both;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    min-height: 100px;
    box-sizing: border-box;
    white-space: pre-wrap;
  }

  #typed-input:focus {
    border-color: #21ba45 !important;
    box-shadow: 0 0 5px rgba(33, 186, 69, 0.5);
    outline: none;
  }

  .ui.teal.button {
    width: 100%;
    font-size: 1.1rem;
    font-weight: 600;
    margin-top: 10px;
    box-shadow: 0 3px 7px rgba(0, 128, 128, 0.3);
    transition: background-color 0.3s ease;
  }

  .ui.teal.button:hover {
    background-color: #16ab9c;
    box-shadow: 0 4px 10px rgba(22, 171, 156, 0.6);
  }

  #stats {
    font-size: 1.1rem;
    color: #555;
    border-radius: 0.3rem;
    background: #fafafa;
    box-shadow: inset 0 1px 3px rgba(0,0,0,0.05);
  }

  #stats p {
    margin: 0.4rem 0;
    font-weight: 600;
  }

  #stats span {
    color: #21ba45;
    font-weight: 700;
  }

  /* New coloring */
  .correct {
    color: #21ba45;
  }

  .incorrect {
    color: #db2828;
  }

  #text-display .motorcycle.icon.moving-moto {
    color: #f2711c; /* Semantic UI orange */
    margin-left: 2px;
    margin-right: 2px;
    animation: motoMove 0.2s ease-in-out;
  }

  @keyframes motoMove {
    0% { transform: translateX(-5px); }
    100% { transform: translateX(0); }
  }
</style>
